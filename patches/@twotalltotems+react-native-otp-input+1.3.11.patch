diff --git a/node_modules/@twotalltotems/react-native-otp-input/dist/index.js b/node_modules/@twotalltotems/react-native-otp-input/dist/index.js
index 71580b8..b8ba8ed 100644
--- a/node_modules/@twotalltotems/react-native-otp-input/dist/index.js
+++ b/node_modules/@twotalltotems/react-native-otp-input/dist/index.js
@@ -1,9 +1,8 @@
 import React, { Component } from 'react';
-import { View, TextInput, TouchableWithoutFeedback, Keyboard, Platform, I18nManager, } from 'react-native';
-import Clipboard from '@react-native-community/clipboard';
-import styles from './styles';
-import { isAutoFillSupported } from './helpers/device';
+import { I18nManager, Keyboard, Platform, TextInput, TouchableWithoutFeedback, View, } from 'react-native';
 import { codeToArray } from './helpers/codeToArray';
+import { isAutoFillSupported } from './helpers/device';
+import styles from './styles';
 export default class OTPInputView extends Component {
     constructor(props) {
         super(props);
@@ -41,20 +40,6 @@ export default class OTPInputView extends Component {
         this.checkPinCodeFromClipBoard = () => {
             const { pinCount, onCodeFilled } = this.props;
             const regexp = new RegExp(`^\\d{${pinCount}}$`);
-            Clipboard.getString().then(code => {
-                if (this.hasCheckedClipBoard && regexp.test(code) && (this.clipBoardCode !== code)) {
-                    this.setState({
-                        digits: code.split(""),
-                    }, () => {
-                        this.blurAllFields();
-                        this.notifyCodeChanged();
-                        onCodeFilled && onCodeFilled(code);
-                    });
-                }
-                this.clipBoardCode = code;
-                this.hasCheckedClipBoard = true;
-            }).catch(() => {
-            });
         };
         this.handleChangeText = (index, text) => {
             const { onCodeFilled, pinCount } = this.props;
@@ -132,8 +117,8 @@ export default class OTPInputView extends Component {
             const { color: defaultPlaceholderTextColor } = { ...defaultTextFieldStyle, ...codeInputFieldStyle };
             return (<View pointerEvents="none" key={index + "view"} testID="inputSlotView">
                 <TextInput testID="textInput" underlineColorAndroid='rgba(0,0,0,0)' style={selectedIndex === index ? [defaultTextFieldStyle, codeInputFieldStyle, codeInputHighlightStyle] : [defaultTextFieldStyle, codeInputFieldStyle]} ref={ref => { this.fields[index] = ref; }} onChangeText={text => {
-                this.handleChangeText(index, text);
-            }} onKeyPress={({ nativeEvent: { key } }) => { this.handleKeyPressTextInput(index, key); }} value={!clearInputs ? digits[index] : ""} keyboardAppearance={keyboardAppearance} keyboardType={keyboardType} textContentType={isAutoFillSupported ? "oneTimeCode" : "none"} key={index} selectionColor={selectionColor} secureTextEntry={secureTextEntry} editable={editable} placeholder={placeholderCharacter} placeholderTextColor={placeholderTextColor || defaultPlaceholderTextColor}/>
+                    this.handleChangeText(index, text);
+                }} onKeyPress={({ nativeEvent: { key } }) => { this.handleKeyPressTextInput(index, key); }} value={!clearInputs ? digits[index] : ""} keyboardAppearance={keyboardAppearance} keyboardType={keyboardType} textContentType={isAutoFillSupported ? "oneTimeCode" : "none"} key={index} selectionColor={selectionColor} secureTextEntry={secureTextEntry} editable={editable} placeholder={placeholderCharacter} placeholderTextColor={placeholderTextColor || defaultPlaceholderTextColor} />
             </View>);
         };
         this.renderTextFields = () => {
@@ -169,21 +154,21 @@ export default class OTPInputView extends Component {
         const { pinCount, style, clearInputs } = this.props;
         const digits = this.getDigits();
         return (<View testID="OTPInputView" style={style}>
-                <TouchableWithoutFeedback style={{ width: '100%', height: '100%' }} onPress={() => {
-            if (!clearInputs) {
-                let filledPinCount = digits.filter((digit) => { return (digit !== null && digit !== undefined); }).length;
-                this.focusField(Math.min(filledPinCount, pinCount - 1));
-            }
-            else {
-                this.clearAllFields();
-                this.focusField(0);
-            }
-        }}>
-                    <View style={{ flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row', justifyContent: 'space-between', alignItems: 'center', width: '100%', height: '100%' }}>
-                        {this.renderTextFields()}
-                    </View>
-                </TouchableWithoutFeedback>
-            </View>);
+            <TouchableWithoutFeedback style={{ width: '100%', height: '100%' }} onPress={() => {
+                if (!clearInputs) {
+                    let filledPinCount = digits.filter((digit) => { return (digit !== null && digit !== undefined); }).length;
+                    this.focusField(Math.min(filledPinCount, pinCount - 1));
+                }
+                else {
+                    this.clearAllFields();
+                    this.focusField(0);
+                }
+            }}>
+                <View style={{ flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row', justifyContent: 'space-between', alignItems: 'center', width: '100%', height: '100%' }}>
+                    {this.renderTextFields()}
+                </View>
+            </TouchableWithoutFeedback>
+        </View>);
     }
 }
 OTPInputView.defaultProps = {
